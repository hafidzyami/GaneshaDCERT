generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// VC Request
enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum RequestType {
  ISSUANCE
  RENEWAL
  UPDATE
  REVOKE
}

enum PaymentStatus {
  UNPAID
  PAID
  CANCELED
}

model VCIssuanceRequest {
  id             String        @id @default(uuid())
  encrypted_body String
  issuer_did     String
  holder_did     String
  status         RequestStatus @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?
}

model VCRenewalRequest {
  id             String        @id @default(uuid())
  encrypted_body String
  issuer_did     String
  holder_did     String
  status         RequestStatus @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?
}

model VCUpdateRequest {
  id             String        @id @default(uuid())
  encrypted_body String
  issuer_did     String
  holder_did     String
  status         RequestStatus @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?
}

model VCRevokeRequest {
  id             String        @id @default(uuid())
  encrypted_body String
  issuer_did     String
  holder_did     String
  status         RequestStatus @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?
}

model VPSharing {
  id         String @id @default(uuid())
  holder_did String
  VP         Json
}

model VCResponse {
  id             String      @id @default(uuid())
  order_id       String      @default(uuid())
  request_id     String      @default(uuid())
  request_type   RequestType
  issuer_did     String
  holder_did     String
  encrypted_body String
}

model Order {
  id                String        @id @default(uuid())
  payment_method_id String        @default(uuid())
  payment_payload   Json
  VCs_id            String[]      @default(uuid())
  schemas_id        String[]
  request_type      RequestType
  holder_did        String
  issuer_did        String
  payment_status    PaymentStatus @default(UNPAID)
  product_fee       Decimal
  service_fee       Decimal
  total_fee         Decimal
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  deletedAt         DateTime?
}

model PaymentMethod {
  id               String    @id @default(uuid())
  type             String
  group            String
  name             String
  bank_code        String
  sender_bank_type String
  description      String
  deadline         Int
  icon             String
  availability     Boolean   @default(false)
  fee_fixed        Decimal
  fee_percent      Decimal
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?
}

model InstitutionRegistration {
  id         String        @id @default(uuid())
  email      String        @unique
  name       String
  phone      String
  country    String
  website    String
  address    String
  status     RequestStatus @default(PENDING)
  approvedBy String?
  approvedAt DateTime?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  magicLinks MagicLink[]
}

model VCSchema {
  id          String   @default(uuid())
  version     Int      @default(1)
  name        String
  schema      Json
  issuer_did  String
  issuer_name String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@id([id, version])
  @@index([id])
  @@index([version])
  @@index([isActive])
}

model MagicLink {
  id            String                  @id @default(uuid())
  institutionId String
  token         String                  @unique
  expiresAt     DateTime
  used          Boolean                 @default(false)
  usedAt        DateTime?
  createdAt     DateTime                @default(now())
  institution   InstitutionRegistration @relation(fields: [institutionId], references: [id])

  @@index([token])
  @@index([institutionId])
}

model VPRequest {
  id             String   @id @default(uuid())
  holder_did     String
  verifier_did   String
  list_schema_id String[]
  createdAt      DateTime @default(now())
}

model Admin {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PushToken {
  id         String   @id @default(uuid())
  holder_did String
  token      String   @unique
  deviceInfo Json?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([holder_did])
  @@index([token])
}

model Institution {
  id        String   @id @default(uuid())
  did       String   @unique
  email     String   @unique
  name      String
  phone     String
  country   String
  website   String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
